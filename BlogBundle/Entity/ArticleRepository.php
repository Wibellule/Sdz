<?php

// src/Sdz/BlogBundle/Entity/ArticleRepository

namespace Sdz\BlogBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{
    public function myFindAll()
    {
        $queryBuilder = $this->createQueryBuilder('a');

        // Méthode équivalente, mais plus longue :
        /**  $queryBuilder $queryBuilder = $this->_em
         *   ->createQueryBuilder()
         *   ->select('a')
         *   ->from($this->_entityName, 'a');
         */

        // Dans un repository, $this->_entityName est le namespace de l'entité gérée
        // Ici il vaut donc Sdz\BlogBundle\Entity\Article

        // On ajoute ce que l'on veut
        $queryBuilder->where('a.auteur = :auteur')
                    ->setParameter('auteur', 'wibellule');

        // On applique notre condition
        $queryBuilder = $this->whereCurrentYear($queryBuilder);

        // On peut mettre ce que l'on veut après
        $queryBuilder->orderBy('a.date', 'DESC');

        // On a fini de construire notre requête

        // On récupère la Query à partir de QueryBuilder
        $query = $queryBuilder->getQuery();

        // On récupère les résultats à partir de la query
        $resultats = $query->getResult();

        // On retourne ces résultats
        return $resultats;

    }

    public function myFindOne($id)
    {
        // On passe par le QueryBuilder vide de l'EntityManager pour l'exemple
        $qb = $this->_em->createQueryBuilder();

        $qb->select('a')
           ->from('SdzBlogBundle:Article', 'a')
           ->where('a.id = :id')
           ->setParameter('id', $id);

        return $qb->getQuery()->getResult();
    }

    public function findByAuteurAndDate($auteur, $annee)
    {
        // On utilise le QueryBuilder crée par le repository directement pour gagner du temps
        // Plus besoin de faire le select() ne le from() par la suite
        $qb = $this->createQueryBuilder('a');

        $qb->where('a.auteur = :auteur')
            ->setParameter('auteur', $auteur)
           ->andWhere('a.date < :annee')
            ->setParameter('annee', $annee)
           ->orderBy('a.date', 'DESC');

        return $qb->getQuery()->getResult();

    }

    public function whereCurrentYear(\Doctrine\ORM\QueryBuilder $qb)
    {
        $qb->andWhere('a.date BETWEEN :debut AND :fin')
            ->setParameter('debut', new \DateTime(date('Y').'-01-01')) // Date entre le 1er janvier de cette année
            ->setParameter('fin', new \DateTime(date('Y').'-12-31')); // Et le 31 décembre de cette année

        return $qb;
    }

    public function myFindAllDQL($id)
    {
        $query = $this->_em->createQuery("SELECT a FROM SdzBlogBundle:Article a WHERE a.id = :id");
        $query->setParameter('id', $id);
        // Utilisation de getSingleResult() car la requête ne doit retourner qu'un seul résultat
        return $query->getSingleResult();
    }

    public function getArticleAvecCommentaires()
    {
        $qb = $this->createQueryBuilder('a')
                   ->leftJoin('a.commentaire','c')
                   ->addSelect('c');

        return $qb->getQuery()->getResult();
    }

    public function getAvecCategories(array $nom_categories)
    {
        $qb = $this->createQueryBuilder('a');

        // On fait une jointure avec l'entité Categorie, avec pour alias "c"
        $qb->join('a.categorie', 'c')
           ->where($qb->expr()->in('c.nom', $nom_categories));
        // Puis on filtre sur le nom des catégories à l'aide d'un IN
        // Enfin, on retourne le resultat
        return $qb->getQuery()->getResult();
    }

    public function getArticles($nombrePerPage, $page)
    {
        // On déplace la vérification du numéro de page dans cette méthode
        if ($page < 1)
        {
            throw new \InvalidArgumentException('L\'argument $page ne peut être inférieur à 1 (valeur : "'.$page.'").');
        }

        $query = $this->createQueryBuilder('a')
                      ->leftJoin('a.image', 'i')
                        ->addSelect('i')
                      ->leftJoin('a.categories', 'c')
                        ->addSelect('c')
                      ->orderBy('a.date', 'DESC')
                      ->getQuery();

        // On définit l'article à partir duquel commencer la liste
        $query->setFirstResult(($page-1) * $nombrePerPage)
        // Ainsi que le nombre d'articles à afficher
              ->setMaxResults($nombrePerPage);

        return new Paginator($query);
    }
}
